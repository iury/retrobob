const std = @import("std");
const Memory = @import("../../memory.zig").Memory;

pub const MANUAL_PALETTES: []const [24]u8 = &[_][24]u8{
    .{ 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00 }, // up
    .{ 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00 }, // up + a
    .{ 0x9f, 0x63, 0x79, 0x42, 0xb0, 0x15, 0xcb, 0x04, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00 }, // up + b
    .{ 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00 }, // left
    .{ 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00 }, // left + a
    .{ 0xff, 0x7f, 0x94, 0x52, 0x4a, 0x29, 0x00, 0x00, 0xff, 0x7f, 0x94, 0x52, 0x4a, 0x29, 0x00, 0x00, 0xff, 0x7f, 0x94, 0x52, 0x4a, 0x29, 0x00, 0x00 }, // left + b
    .{ 0xff, 0x53, 0x5f, 0x4a, 0x52, 0x7e, 0x00, 0x00, 0xff, 0x53, 0x5f, 0x4a, 0x52, 0x7e, 0x00, 0x00, 0xff, 0x53, 0x5f, 0x4a, 0x52, 0x7e, 0x00, 0x00 }, // down
    .{ 0xff, 0x7f, 0xff, 0x03, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x03, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x03, 0x1f, 0x00, 0x00, 0x00 }, // down + a
    .{ 0xff, 0x7f, 0xff, 0x03, 0x2f, 0x01, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00 }, // down + b
    .{ 0xff, 0x7f, 0xea, 0x03, 0x1f, 0x01, 0x00, 0x00, 0xff, 0x7f, 0xea, 0x03, 0x1f, 0x01, 0x00, 0x00, 0xff, 0x7f, 0xea, 0x03, 0x1f, 0x01, 0x00, 0x00 }, // right
    .{ 0xff, 0x7f, 0xef, 0x1b, 0x80, 0x61, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 }, // right + a
    .{ 0x00, 0x00, 0x00, 0x42, 0x7f, 0x03, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x42, 0x7f, 0x03, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x42, 0x7f, 0x03, 0xff, 0x7f }, // right + b
};

// huge LUT to find the colors that the Gameboy Color uses to apply on monochrome games

// https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM#Assigned_Palette_Configurations
pub const PALETTES: []const [24]u8 = &[_][24]u8{
    // each color is already converted to 2 bytes of a BGR555
    // BG 0        BG 1        BG 2        BG 3        OBJ0 0      OBJ0 1      OBJ0 2      OBJ0 3      OBJ1 0      OBJ1 1      OBJ1 2      OBJ1 3
    .{ 0xff, 0x7f, 0xb5, 0x42, 0xc8, 0x3d, 0x00, 0x00, 0xff, 0x7f, 0xdf, 0x01, 0x12, 0x01, 0x00, 0x00, 0xff, 0x7f, 0xdf, 0x01, 0x12, 0x01, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xb5, 0x42, 0xc8, 0x3d, 0x00, 0x00, 0xff, 0x7f, 0xdf, 0x01, 0x12, 0x01, 0x00, 0x00, 0xff, 0x7f, 0xeb, 0x7e, 0x1f, 0x00, 0x00, 0x7c },
    .{ 0xff, 0x4f, 0xd2, 0x7e, 0x4c, 0x3a, 0xe0, 0x1c, 0xff, 0x4f, 0xd2, 0x7e, 0x4c, 0x3a, 0xe0, 0x1c, 0xff, 0x4f, 0xd2, 0x7e, 0x4c, 0x3a, 0xe0, 0x1c },
    .{ 0xff, 0x4f, 0xd2, 0x7e, 0x4c, 0x3a, 0xe0, 0x1c, 0x1f, 0x23, 0x5f, 0x03, 0xf2, 0x00, 0x09, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xed, 0x03, 0xff, 0x7f, 0x5f, 0x25, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00 },
    .{ 0x6a, 0x03, 0x1f, 0x02, 0xff, 0x03, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xef, 0x03, 0xd6, 0x01, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xea, 0x03, 0x1f, 0x01, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xea, 0x03, 0x1f, 0x01, 0x00, 0x00, 0xff, 0x7f, 0xea, 0x03, 0x1f, 0x01, 0x00, 0x00, 0xff, 0x7f, 0xeb, 0x7e, 0x1f, 0x00, 0x00, 0x7c },
    .{ 0xff, 0x7f, 0x7f, 0x02, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x7f, 0x02, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x7f, 0x02, 0x1f, 0x00, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x7f, 0x02, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x7f, 0x02, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x7f, 0x02, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xeb, 0x7e, 0x1f, 0x00, 0x00, 0x7c },
    .{ 0xff, 0x7f, 0xff, 0x03, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x03, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x03, 0x1f, 0x00, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xff, 0x03, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x03, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xeb, 0x7e, 0x1f, 0x00, 0x00, 0x7c },
    .{ 0x74, 0x7e, 0xff, 0x03, 0x80, 0x01, 0x00, 0x00, 0x74, 0x7e, 0xff, 0x03, 0x80, 0x01, 0x00, 0x00, 0x74, 0x7e, 0xff, 0x03, 0x80, 0x01, 0x00, 0x00 },
    .{ 0x74, 0x7e, 0xff, 0x03, 0x80, 0x01, 0x00, 0x00, 0x9f, 0x29, 0x1a, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x9f, 0x29, 0x1a, 0x00, 0x0c, 0x00, 0x00, 0x00 },
    .{ 0x74, 0x7e, 0xff, 0x03, 0x80, 0x01, 0x00, 0x00, 0x9f, 0x29, 0x1a, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xff, 0x7f, 0xff, 0x3f, 0x00, 0x7e },
    .{ 0xff, 0x67, 0xac, 0x77, 0x13, 0x1a, 0x6b, 0x2d, 0xff, 0x7f, 0xdf, 0x01, 0x12, 0x01, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00 },
    .{ 0xd6, 0x7e, 0xff, 0x4b, 0x75, 0x21, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c },
    .{ 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x3f, 0x00, 0x7e, 0x1f, 0x00 },
    .{ 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00, 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00, 0x1f, 0x23, 0x5f, 0x03, 0xf2, 0x00, 0x09, 0x00 },
    .{ 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00, 0x1f, 0x23, 0x5f, 0x03, 0xf2, 0x00, 0x09, 0x00, 0x1f, 0x23, 0x5f, 0x03, 0xf2, 0x00, 0x09, 0x00 },
    .{ 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00, 0x1f, 0x23, 0x5f, 0x03, 0xf2, 0x00, 0x09, 0x00, 0xff, 0x7f, 0xeb, 0x7e, 0x1f, 0x00, 0x00, 0x7c },
    .{ 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0xe0, 0x03, 0x06, 0x02, 0x20, 0x01, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00 },
    .{ 0x00, 0x00, 0x00, 0x42, 0x7f, 0x03, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x42, 0x7f, 0x03, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x42, 0x7f, 0x03, 0xff, 0x7f },
    .{ 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x03, 0x1f, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xb5, 0x42, 0xc8, 0x3d, 0x00, 0x00, 0xff, 0x7f, 0xbf, 0x32, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x94, 0x52, 0x4a, 0x29, 0x00, 0x00, 0xff, 0x7f, 0x94, 0x52, 0x4a, 0x29, 0x00, 0x00, 0xff, 0x7f, 0x94, 0x52, 0x4a, 0x29, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0x3f, 0x03, 0x93, 0x01, 0x00, 0x00, 0xff, 0x7f, 0x3f, 0x03, 0x93, 0x01, 0x00, 0x00, 0xff, 0x7f, 0x3f, 0x03, 0x93, 0x01, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xef, 0x1b, 0x80, 0x61, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x80, 0x61, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xef, 0x1b, 0x80, 0x61, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00 },
    .{ 0xff, 0x7f, 0xef, 0x1b, 0x80, 0x61, 0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00 },
};

// https://github.com/ISSOtm/gb-bootroms/blob/443d7f057ae06e8d1d76fa8083650cf0be2cd0ae/src/cgb.asm#L1221-L1230
const INDEXES: []const u8 = &[_]u8{
    0x00, 0x88, 0x16, 0x36, 0xd1, 0xdb, 0xf2, 0x3c, 0x8c, 0x92, 0x3d, //
    0x5c, 0x58, 0xc9, 0x3e, 0x70, 0x1d, 0x59, 0x69, 0x19, 0x35, 0xa8, //
    0x14, 0xaa, 0x75, 0x95, 0x99, 0x34, 0x6f, 0x15, 0xff, 0x97, 0x4b, //
    0x90, 0x17, 0x10, 0x39, 0xf7, 0xf6, 0xa2, 0x49, 0x4e, 0x43, 0x68, //
    0xe0, 0x8b, 0xf0, 0xce, 0x0c, 0x29, 0xe8, 0xb7, 0x86, 0x9a, 0x52, //
    0x01, 0x9d, 0x71, 0x9c, 0xbd, 0x5d, 0x6d, 0x67, 0x3f, 0x6b, 0xb3, //
    0x46, 0x28, 0xa5, 0xc6, 0xd3, 0x27, 0x61, 0x18, 0x66, 0x6a, 0xbf, //
    0x0d, 0xf4, 0xb3, 0x46, 0x28, 0xa5, 0xc6, 0xd3, 0x27, 0x61, 0x18, //
    0x66, 0x6a, 0xbf, 0x0d, 0xf4, 0xb3, //
};

// LUT to find a palette entry given an id; the entry is the same array position.
// these $FE are just padding
const LOOKUP: []const [8]u8 = &[_][8]u8{
    .{ 0xb3, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x59, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x8c, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x86, 0xa8, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0xce, 0xd1, 0xf0, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x36, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x34, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x3d, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x95, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x71, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x19, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x3e, 0xe0, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x15, 0xdb, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x69, 0xf2, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x88, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x1d, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x49, 0x5c, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0xc9, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x46, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x61, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x3c, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x4e, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x9c, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x0d, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x6b, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0xd3, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0xbf, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x9d, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x4b, 0x90, 0x9a, 0xbd, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x17, 0x8b, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x39, 0x43, 0x97, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x01, 0x10, 0x29, 0x52, 0x5d, 0x68, 0x6d, 0xf6 },
    .{ 0x14, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x70, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x0c, 0x16, 0x35, 0x67, 0x75, 0x92, 0x99, 0xb7 },
    .{ 0xa5, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0xa2, 0xf7, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0xe8, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x47, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0xd4, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x58, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x6f, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0xaa, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0x00, 0x3f, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
    .{ 0xf4, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
};

pub fn getDmgPalettes(rom_data: []const u8, title_hash: u8, is_nintendo: bool) usize {
    var palette_id: u8 = 0;
    if (is_nintendo) {
        const b = title_hash;
        if (std.mem.indexOfScalar(u8, INDEXES, b)) |i| {
            if (i <= 64) {
                palette_id = b;
            } else {
                const letter = rom_data[0x137];
                palette_id = switch (i) {
                    65, 79, 93 => blk: {
                        if (letter == 'B') break :blk 0x49;
                        if (letter == 'U') break :blk 0xb3;
                        if (letter == 'R') break :blk 0x95;
                        break :blk 0;
                    },
                    66, 80 => blk: {
                        if (letter == 'E') break :blk 0x46;
                        if (letter == 'R') break :blk 0x47;
                        break :blk 0;
                    },
                    67, 81 => blk: {
                        if (letter == 'F') break :blk 0x4b;
                        if (letter == 'A') break :blk 0xe8;
                        break :blk 0;
                    },
                    68, 82 => blk: {
                        if (letter == 'A') break :blk 0xe8;
                        if (letter == 'R') break :blk 0xa5;
                        break :blk 0;
                    },
                    69, 83 => blk: {
                        if (letter == 'A') break :blk 0x59;
                        if (letter == ' ') break :blk 0x00;
                        break :blk 0;
                    },
                    70, 84 => blk: {
                        if (letter == 'R') break :blk 0xd3;
                        if (letter == 'I') break :blk 0xd4;
                        break :blk 0;
                    },
                    71, 85 => blk: {
                        if (letter == 'B') break :blk 0x49;
                        if (letter == 'N') break :blk 0x17;
                        break :blk 0;
                    },
                    72, 86 => blk: {
                        if (letter == 'E') break :blk 0x61;
                        if (letter == 'A') break :blk 0x17;
                        break :blk 0;
                    },
                    73, 87 => blk: {
                        if (letter == 'K') break :blk 0x6b;
                        if (letter == 'I') break :blk 0x00;
                        break :blk 0;
                    },
                    74, 88 => blk: {
                        if (letter == 'E') break :blk 0x34;
                        if (letter == 'L') break :blk 0x00;
                        break :blk 0;
                    },
                    75, 89 => blk: {
                        if (letter == 'K') break :blk 0x6b;
                        if (letter == 'I') break :blk 0x3d;
                        break :blk 0;
                    },
                    76, 90 => blk: {
                        if (letter == ' ') break :blk 0xbf;
                        if (letter == 'C') break :blk 0xce;
                        break :blk 0;
                    },
                    77, 91 => blk: {
                        if (letter == 'R') break :blk 0x69;
                        if (letter == 'E') break :blk 0xd;
                        break :blk 0;
                    },
                    78, 92 => blk: {
                        if (letter == '-') break :blk 0xf4;
                        if (letter == ' ') break :blk 0x34;
                        break :blk 0;
                    },
                    else => 0,
                };
            }
        }
    }

    var entry: usize = 43;
    for (LOOKUP, 0..) |table, i| {
        if (std.mem.indexOfScalar(u8, &table, palette_id)) |_| {
            entry = i;
            break;
        }
    }

    return entry;
}
